{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Board.svelte",
    "..\\..\\Controls.svelte",
    "..\\..\\Food.svelte",
    "..\\..\\Game.svelte",
    "..\\..\\Snake.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Game from './components/Game.svelte';\n    import Controls from './components/Controls.svelte';\n</script>\n\n<main>\n    <h1>Snake Game</h1>\n    \n    <Game />\n\n    <Controls />\n</main>\n\n<style>\n    main {\n        width: 100%;\n    }\n    h1 {\n        text-align: center;\n    }\n</style>\n",
    "<script>\r\n    import Snake from \"./Snake.svelte\";\r\n    import Food from \"./Food.svelte\";\r\n\r\n    export let width;\r\n    export let height;\r\n    export let cellSize;\r\n</script>\r\n\r\n<div\r\n    class=\"board\"\r\n    style=\"width: {width*cellSize}px; height: {height*cellSize}px\"\r\n>\r\n    <Snake\r\n        {cellSize}\r\n    />\r\n    <Food\r\n        {cellSize}\r\n    />\r\n</div>\r\n\r\n<style>\r\n    .board {\r\n        border: solid black 1px;\r\n        position: relative;\r\n        margin: 20px auto;\r\n        /* background-image: url('../background.jpg'); */\r\n        background-size: cover;\r\n    }\r\n</style>",
    "<script>\r\n    const leftClick = () => {\r\n        dispatchEvent(new KeyboardEvent(\"keydown\", {\r\n            key: \"ArrowLeft\",\r\n            keyCode: 37,\r\n            code: \"ArrowLeft\",\r\n            which: 37,\r\n            shiftKey: false,\r\n            ctrlKey: false,\r\n            metaKey: false\r\n        }));\r\n    }\r\n    const upClick = () => {\r\n        dispatchEvent(new KeyboardEvent(\"keydown\", {\r\n            key: \"ArrowUp\",\r\n            keyCode: 38,\r\n            code: \"ArrowUp\",\r\n            which: 38,\r\n            shiftKey: false,\r\n            ctrlKey: false,\r\n            metaKey: false\r\n        }));\r\n    }\r\n    const rightClick = () => {\r\n        dispatchEvent(new KeyboardEvent(\"keydown\", {\r\n            key: \"ArrowRight\",\r\n            keyCode: 39,\r\n            code: \"ArrowRight\",\r\n            which: 39,\r\n            shiftKey: false,\r\n            ctrlKey: false,\r\n            metaKey: false\r\n        }));\r\n    }\r\n    const downClick = () => {\r\n        dispatchEvent(new KeyboardEvent(\"keydown\", {\r\n            key: \"ArrowDown\",\r\n            keyCode: 40,\r\n            code: \"ArrowDown\",\r\n            which: 40,\r\n            shiftKey: false,\r\n            ctrlKey: false,\r\n            metaKey: false\r\n        }));\r\n    }\r\n</script>\r\n\r\n\r\n<div class=\"controls\">\r\n    <div>\r\n        <button on:click={upClick}><i class=\"fas fa-arrow-up\"></i></button>\r\n    </div>\r\n    <div>\r\n        <button on:click={leftClick}><i class=\"fas fa-arrow-left\"></i></button>\r\n        <button on:click={downClick}><i class=\"fas fa-arrow-down\"></i></button>\r\n        <button on:click={rightClick}><i class=\"fas fa-arrow-right\"></i></button>\r\n    </div>\r\n</div>\r\n\r\n\r\n<style>\r\n    .controls {\r\n        text-align: center;\r\n        width: 100%;\r\n    }\r\n    button {\r\n        width: 10vw;\r\n        height: 10vw;\r\n        cursor: pointer;\r\n        font-size: 4vw;\r\n        color: #222;\r\n    }\r\n</style>",
    "<script>\n    import { food } from \"../stores\";\n\n    export let cellSize;\n</script>\n\n<div\n    class=\"food\"\n    style=\" top: {$food.y * cellSize}px;\n            left: {$food.x * cellSize}px;\n            width: {cellSize - 2}px;\n            height: {cellSize - 2}px;\n        \"\n/>\n\n<style>\n    .food {\n        width: 48px;\n        height: 48px;\n        position: absolute;\n        border: solid black 1px;\n        background-color: red;\n        border-radius: 50%;\n        z-index: 0;\n    }\n</style>\n",
    "<script>\r\n    import { snake, food } from '../stores';\r\n    import Board from './Board.svelte';\r\n\r\n    // \r\n    const BOARD_WIDTH           = 30;\r\n    const BOARD_HEGHIT          = 22;\r\n    const BOARD_CELL_SIZE       = 30;\r\n    const BOARD                 = Array.from({length: BOARD_HEGHIT}, () => Array.from({length: BOARD_WIDTH}, () => BOARD_KEY_EMPTY_CELL) );\r\n\r\n    const BOARD_KEY_EMPTY_CELL  = 0;\r\n    const BOARD_KEY_SNAKE_BODY  = 1;\r\n    const BOARD_KEY_FOOD        = 2;\r\n\r\n    const LEFT                  = 'left';\r\n    const UP                    = 'up';\r\n    const RIGHT                 = 'right';\r\n    const DOWN                  = 'down';\r\n\r\n    const SNAKE_START_SPEED     = 300;\r\n    const SNAKE_START_DIR       = RIGHT;\r\n    const SNAKE_START_LENGTH    = 3;\r\n\r\n\r\n    // Board\r\n    const updateBoard = (updateSnake = false, updateFood = false) => {\r\n        if ( updateFood ) {\r\n            BOARD.forEach( row => {\r\n                row.forEach( cell => {\r\n                    if ( cell === BOARD_KEY_FOOD ) {\r\n                        cell = BOARD_KEY_EMPTY_CELL;\r\n                    }\r\n                } )\r\n            } )\r\n            BOARD[$food.y][$food.x] = BOARD_KEY_FOOD;\r\n        }\r\n        if ( updateSnake ) {\r\n            $snake.body.forEach( snakePart => {\r\n                BOARD[snakePart.y][snakePart.x] = BOARD_KEY_SNAKE_BODY;\r\n            } );\r\n        }\r\n    }\r\n    const getBoardEmptyCells = () => {\r\n        const cellsList = [];\r\n        for ( let i = 0 ; i < BOARD.length ; i++ ) {\r\n            for ( let j = 0 ; j < BOARD[i].length ; j++ ) {\r\n                if ( BOARD[i][j] === BOARD_KEY_EMPTY_CELL ) cellsList.push({ x: j , y: i });\r\n            }\r\n        }\r\n        return cellsList;\r\n    }\r\n    // Snake\r\n    const createSnake = (speed, direction, length) => {\r\n        const createSnakeBody = () => {\r\n            const body = [];\r\n            for ( let i = 1 ; i <= length ; i++ ) {\r\n                body.push({\r\n                    x: length - i,\r\n                    y: 0\r\n                });\r\n            }\r\n            return body;\r\n        }\r\n        return { speed , direction , body: createSnakeBody() };\r\n    }\r\n    const moveSnake = () => {\r\n        const tail = $snake.body.pop();\r\n        BOARD[tail.y][tail.x] = BOARD_KEY_EMPTY_CELL;\r\n\r\n        let { x, y } = $snake.body[0];\r\n        switch ( $snake.direction ) {\r\n            case LEFT: x -= 1;\r\n            break;\r\n            case UP: y -= 1;\r\n            break;\r\n            case RIGHT: x += 1;\r\n            break;\r\n            case DOWN: y += 1;\r\n            break;\r\n            default: break;\r\n        }\r\n        $snake.body = [{ x , y }, ...$snake.body];\r\n        BOARD[y][x] = BOARD_KEY_SNAKE_BODY;\r\n    }\r\n    // Food\r\n    const getRandomEmptyLocation = () => {\r\n        const emptyCells = getBoardEmptyCells();\r\n        const random = Math.floor(Math.random() * (emptyCells.length + 1));\r\n        return {\r\n            x: emptyCells[random].x,\r\n            y: emptyCells[random].y\r\n        };\r\n    }\r\n    // Game Logic\r\n    const resetGame = () => {\r\n        $snake = createSnake(SNAKE_START_SPEED, SNAKE_START_DIR, SNAKE_START_LENGTH);\r\n        updateBoard(true);\r\n        $food = getRandomEmptyLocation();\r\n        updateBoard(false, true);\r\n    }\r\n    const getDirectionFromKeyCode = (keyCode) => {\r\n        switch ( keyCode ) {\r\n            case 37: return LEFT;\r\n            case 38: return UP;\r\n            case 39: return RIGHT;\r\n            case 40: return DOWN;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    const isDirectionLegal = (newDir, oldDir) => {\r\n        return !(\r\n            (newDir === LEFT  && oldDir === RIGHT) ||\r\n            (newDir === RIGHT && oldDir === LEFT) ||\r\n            (newDir === UP    && oldDir === DOWN) ||\r\n            (newDir === DOWN  && oldDir === UP)\r\n        );\r\n    }\r\n    const keyDownHandler = (e) => {\r\n        console.log(e);\r\n        const newDirection = getDirectionFromKeyCode(e.keyCode);\r\n        if ( newDirection && isDirectionLegal(newDirection, $snake.direction) ) {\r\n            $snake.direction = newDirection;\r\n        }\r\n    }\r\n    const isGameOver = () => {\r\n        const snakeHead = $snake.body[0];\r\n        return (\r\n            snakeHead.x < 0 ||\r\n            BOARD_WIDTH - 1 < snakeHead.x ||\r\n            snakeHead.y < 0 ||\r\n            BOARD_HEGHIT - 1 < snakeHead.y ||\r\n            $snake.body.every( part => snakeHead.x !== part.x && snakeHead.y !== part.y )\r\n        );\r\n    }\r\n    const startGame = () => {\r\n        const gameLoop = () => {\r\n            moveSnake();\r\n            const head = $snake.body[0];\r\n            if ( head.x === $food.x && head.y === $food.y ) {\r\n                $food = getRandomEmptyLocation();\r\n                updateBoard(false, true);\r\n                $snake.body = [...$snake.body, $snake.body[$snake.body.length - 1]];\r\n                $snake.speed = $snake.speed * 0.95;\r\n            }\r\n            \r\n            if ( isGameOver() ) {\r\n                resetGame();\r\n\r\n            }\r\n            setTimeout(gameLoop, $snake.speed);\r\n        }\r\n        gameLoop();\r\n    }\r\n\r\n    // \r\n    resetGame();\r\n    $: score = $snake.body.length - SNAKE_START_LENGTH;\r\n    \r\n    startGame();\r\n</script>\r\n\r\n\r\n<svelte:window on:keydown={keyDownHandler} />\r\n<div>\r\n    <Board\r\n        width={BOARD_WIDTH}\r\n        height={BOARD_HEGHIT}\r\n        cellSize={BOARD_CELL_SIZE}\r\n    />\r\n\r\n    <h2>Score {score}</h2>\r\n</div>\r\n\r\n\r\n<style>\r\n    h2 {\r\n        text-align: center;\r\n    }\r\n</style>",
    "<script>\r\n    import { snake } from \"../stores\";\r\n\r\n    export let cellSize;\r\n</script>\r\n\r\n{ #each $snake.body as bodyPart, i }\r\n    <div\r\n        class=\"snake-body {i === 0 ? $snake.direction : ''}\"\r\n        style=\" top: {(bodyPart.y) * cellSize}px;\r\n                left: {(bodyPart.x) * cellSize}px;\r\n                width: {cellSize - 2}px;\r\n                height: {cellSize - 2}px;\r\n            \"\r\n    >\r\n        { #if i === 0 }\r\n            <div id=\"leftEye\" class=\"eyes\" />\r\n            <div id=\"rightEye\" class=\"eyes\" />\r\n        { /if }\r\n    </div>\r\n{/each }\r\n\r\n<style>\r\n    .snake-body {\r\n        background-color: green;\r\n        border: black 1px solid;\r\n        position: absolute;\r\n        width: 48px;\r\n        height: 48px;\r\n        z-index: 3;\r\n    }\r\n    .eyes {\r\n        position: absolute;\r\n        background-color: orange;\r\n        border-radius: 50%;\r\n        width: 20%;\r\n        height: 20%;\r\n    }\r\n    #leftEye {\r\n        left: 70%;\r\n        top: 10%;\r\n    }\r\n    #rightEye {\r\n        left: 70%;\r\n        bottom: 10%;\r\n    }\r\n    .snake-body.right {\r\n        transform: rotate(0deg);\r\n    }\r\n    .snake-body.left {\r\n        transform: rotate(180deg);\r\n    }\r\n    .snake-body.up {\r\n        transform: rotate(270deg);\r\n    }\r\n    .snake-body.down {\r\n        transform: rotate(90deg);\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAcI,IAAI,cAAC,CAAC,AACF,KAAK,CAAE,IAAI,AACf,CAAC,AACD,EAAE,cAAC,CAAC,AACA,UAAU,CAAE,MAAM,AACtB,CAAC;ACGD,MAAM,cAAC,CAAC,AACJ,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CAEjB,eAAe,CAAE,KAAK,AAC1B,CAAC;ACiCD,SAAS,cAAC,CAAC,AACP,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,AACf,CAAC,AACD,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,IAAI,AACf,CAAC;ACvDD,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,GAAG,CACrB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACd,CAAC;ACwJD,EAAE,cAAC,CAAC,AACA,UAAU,CAAE,MAAM,AACtB,CAAC;AC3JD,WAAW,cAAC,CAAC,AACT,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACd,CAAC,AACD,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,MAAM,CACxB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACf,CAAC,AACD,QAAQ,cAAC,CAAC,AACN,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACZ,CAAC,AACD,SAAS,cAAC,CAAC,AACP,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACf,CAAC,AACD,WAAW,MAAM,cAAC,CAAC,AACf,SAAS,CAAE,OAAO,IAAI,CAAC,AAC3B,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AACd,SAAS,CAAE,OAAO,MAAM,CAAC,AAC7B,CAAC,AACD,WAAW,GAAG,cAAC,CAAC,AACZ,SAAS,CAAE,OAAO,MAAM,CAAC,AAC7B,CAAC,AACD,WAAW,KAAK,cAAC,CAAC,AACd,SAAS,CAAE,OAAO,KAAK,CAAC,AAC5B,CAAC"
}